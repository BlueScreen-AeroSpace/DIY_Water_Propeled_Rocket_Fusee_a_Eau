name: ESP32-Firmware-Build-CI

trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  version: '1.0.$(Build.BuildId)'
  projectPath: '$(System.DefaultWorkingDirectory)'  
  buildDate: $[format('{0:yyyyMMdd}', pipeline.startTime)]

steps:
- checkout: self
  displayName: 'Checkout du code source'

- script: |
    pip install platformio
    platformio --version
  displayName: 'Installation de PlatformIO'

- script: |
    pip install esptool
    esptool.py version
  displayName: 'Installation de esptool'

- script: |
    cd $(projectPath)
    platformio run -e esp32doit-devkit-v1
  displayName: 'Compilation du firmware ESP32'

- script: |
    cd $(projectPath)
    platformio run -t buildfs -e esp32doit-devkit-v1
  displayName: 'Construction de l’image LittleFS'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(projectPath)/.pio/build/esp32doit-devkit-v1'
    contents: '**/*.bin' 
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copie des fichiers binaires (firmware, bootloader, partition)'
  
- script: |
    cd $(Build.ArtifactStagingDirectory)
    python3 -m esptool --chip esp32 merge_bin -o esp32doit-devkit_$(version).bin \
      --flash_mode dio --flash_size 4MB --flash_freq 40m \
      0x1000 $(Build.ArtifactStagingDirectory)/bootloader.bin \
      0x8000 $(Build.ArtifactStagingDirectory)/partitions.bin \
      0x10000 $(Build.ArtifactStagingDirectory)/firmware.bin \
      0x290000 $(Build.ArtifactStagingDirectory)/littlefs.bin
  displayName: 'Fusion des fichiers binaires avec LittleFS'


- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'esp32doit-devkit_$(version)'
  displayName: 'Publication de lartefact du firmware'

- script: |
    git clone --branch main $(Build.Repository.Uri) azure-repo
    cd azure-repo
    git remote add github https://$(GitHubPAT)@github.com/BlueScreen-AeroSpace/DIY_Water_Propeled_Rocket_Fusee_a_Eau.git
    git push github main --force
  displayName: "Copier main d'Azure DevOps vers GitHub"
  env:
    GitHubPAT: $(GitHubPAT)

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_DavidGagnon86'
    repositoryName: 'BlueScreen-AeroSpace/DIY_Water_Propeled_Rocket_Fusee_a_Eau'
    action: 'create'
    target: 'main'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(version)'
    title: 'Release v$(version)'
    releaseNotesSource: 'inline'
    releaseNotes: 'Firmware ESP32 auto-généré.'
    assets: '$(Build.ArtifactStagingDirectory)/esp32doit-devkit_$(version).bin'
    assetUploadMode: 'replace'
    addChangeLog: false
  displayName: 'Publication sur GitHub Releases'

- task: Bash@3
  displayName: 'Génération du Manifest'
  inputs:
    targetType: 'inline'
    script: |
      VERSION="${{ variables.version }}"

      mkdir -p output

      sed -e "s|{{version}}|$VERSION|g" \
          template/manifest-template.json > output/manifest-v${{ variables.version }}.json

      echo "Generated file"
      cat output/manifest-v${{ variables.version }}.json

- task: Bash@3
  displayName: 'Push le manifest sur Github'
  inputs:
    targetType: 'inline'
    script: |
      git clone https://$(GitHubPAT)@github.com/BlueScreen-AeroSpace/FirmwareConfig repo
      
      cd repo
      mkdir -p manifest

      cp ../output/manifest-v${{ variables.version }}.json manifest/manifest-v${{ variables.version }}.json

      git config user.email "ci-bot@example.com"
      git config user.name "CI Bot"

      git add .
      git commit -m "Ajouté manifest"
      git push origin main
  env:
    GitHubPAT: $(GitHubPAT)